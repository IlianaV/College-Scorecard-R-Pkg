out3<-GetAllDataInCategory("student",2013)
GetData <- function(endpoint = "schools", format = "json", fieldParams, optionParams="", apiVersionString = "v1", page = 0){
apiKey <- "zbOOYpijllMQmBuyDlsw1NrlClSuVmKq0XeBIb8s"
urlPath = "https://api.data.gov/ed/collegescorecard"
queryUrl <- paste(urlPath, apiVersionString, paste(paste(paste(endpoint, format, sep = "."), fieldParams, sep = "?"),
optionParams, sep = "&"), sep = "/")
#Add apiKey
queryUrl <- paste(queryUrl, "&api_key=", apiKey, sep = "")
#Helper function to get pages
getPages <- function(p = page){
queryUrl <- paste(queryUrl, "&_page=", p, sep = "")
res <- GET(queryUrl)
if (res$status_code==414) {
stop ("Error code 414: Please request fewer variables")
}
}
#Helper function to convert json response to data.frame
toDataFrame <- function(jsonData, parsed = TRUE){
if (exists("errors",where=jsonData)==TRUE) {
errorList<-(matrix(unlist(result$errors), nrow=length(unlist(result$errors[1]))))
stop (paste("\n Your API request has resulted in the following error:",errorList[3,],sep="\n"))
}
if(!parsed)
{
jsonData <- content(jsonData, as = "parsed")
}
for(i in 1:(length(jsonData$results)))
{
jsonData$results[[i]][sapply(jsonData$results[[i]], is.null)] <- NA
jsonData$results[[i]]<-jsonData$results[[i]][order(names(jsonData$results[[i]]))]
}
DF  <-  as.data.frame(t(matrix(unlist(jsonData$results), nrow=length(unlist(jsonData$results[1])))))
colnames(DF)<-names(jsonData$results[[1]])
DF
}
#To get a single page
result <- getPages(0)
result <- content(result, as = "parsed")
DF <- toDataFrame(result)
#To get all pages
if(page == "All")
{
recordsLeft <- result$metadata$total - 20
pages <- seq(ceiling(recordsLeft /20))
result <- lapply(pages, getPages)
temp <- lapply(result, toDataFrame, parsed = FALSE)
DF <- do.call(rbind, temp)
}
DF
}
GetAllDataInCategory <- function(categoryName, year){
#Make the path to the data dicitonary be global var or environment var.
if (!(categoryName %in% c("academics","admissions","aid","completion","cost","earnings","repayment","root",
"school","student"))) {
stop ("Incorrect categoryName. Please choose from the following: 'academics','admissions','aid','completion,'cost',earnings','repayment','root','school', or 'student'. Consult data dictionary for further detail.")
}
if (year<1996 | year>2013) {
stop("Incorrect year selection. Data is available for 1996 through 2013.")
}
dataDict <- read.csv("https://raw.githubusercontent.com/katerabinowitz/College-Scorecard-R-Pkg/master/data/CollegeScorecardDataDictionary-09-08-2015.csv",
stringsAsFactors=FALSE)
categoryVars <- subset(dataDict, dev.category==categoryName, developer.friendly.name)
categoryVars <- categoryVars[categoryVars != ""]
if (categoryName=="root") {
queryList <- paste("fields=", paste(lapply(categoryVars,
function(x) paste(x, sep = "")), collapse = ","), sep = "")
}
else if (categoryName=="school") {
queryList <- paste("fields=id,", paste(lapply(categoryVars,
function(x) paste(categoryName, ".", x, sep = "")), collapse = ","), sep = "")
}
else {
queryList <- paste("fields=id,school.name,", paste(lapply(categoryVars,
function(x) paste(year, ".", categoryName, ".", x, sep = "")), collapse = ","), sep = "")
}
test <- GetData(fieldParams = queryList)
test
}
out3<-GetAllDataInCategory("student",2013)
library(httr)
out3<-GetAllDataInCategory("student",2013)
GetData <- function(endpoint = "schools", format = "json", fieldParams, optionParams="", apiVersionString = "v1", page = 0){
apiKey <- "zbOOYpijllMQmBuyDlsw1NrlClSuVmKq0XeBIb8s"
urlPath = "https://api.data.gov/ed/collegescorecard"
queryUrl <- paste(urlPath, apiVersionString, paste(paste(paste(endpoint, format, sep = "."), fieldParams, sep = "?"),
optionParams, sep = "&"), sep = "/")
#Add apiKey
queryUrl <- paste(queryUrl, "&api_key=", apiKey, sep = "")
#Helper function to get pages
getPages <- function(p = page){
queryUrl <- paste(queryUrl, "&_page=", p, sep = "")
res <- GET(queryUrl)
if (res$status_code==414)
stop ("Error code 414: Please request fewer variables")
}
#Helper function to convert json response to data.frame
toDataFrame <- function(jsonData, parsed = TRUE){
if (exists("errors",where=jsonData)==TRUE) {
errorList<-(matrix(unlist(result$errors), nrow=length(unlist(result$errors[1]))))
stop (paste("\n Your API request has resulted in the following error:",errorList[3,],sep="\n"))
}
if(!parsed)
{
jsonData <- content(jsonData, as = "parsed")
}
for(i in 1:(length(jsonData$results)))
{
jsonData$results[[i]][sapply(jsonData$results[[i]], is.null)] <- NA
jsonData$results[[i]]<-jsonData$results[[i]][order(names(jsonData$results[[i]]))]
}
DF  <-  as.data.frame(t(matrix(unlist(jsonData$results), nrow=length(unlist(jsonData$results[1])))))
colnames(DF)<-names(jsonData$results[[1]])
DF
}
#To get a single page
result <- getPages(0)
result <- content(result, as = "parsed")
DF <- toDataFrame(result)
#To get all pages
if(page == "All")
{
recordsLeft <- result$metadata$total - 20
pages <- seq(ceiling(recordsLeft /20))
result <- lapply(pages, getPages)
temp <- lapply(result, toDataFrame, parsed = FALSE)
DF <- do.call(rbind, temp)
}
DF
}
out3<-GetAllDataInCategory("student",2013)
out3<-GetAllDataInCategory("academics",2013)
GetData <- function(endpoint = "schools", format = "json", fieldParams, optionParams="", apiVersionString = "v1", page = 0){
apiKey <- "zbOOYpijllMQmBuyDlsw1NrlClSuVmKq0XeBIb8s"
urlPath = "https://api.data.gov/ed/collegescorecard"
queryUrl <- paste(urlPath, apiVersionString, paste(paste(paste(endpoint, format, sep = "."), fieldParams, sep = "?"),
optionParams, sep = "&"), sep = "/")
#Add apiKey
queryUrl <- paste(queryUrl, "&api_key=", apiKey, sep = "")
#Helper function to get pages
getPages <- function(p = page){
queryUrl <- paste(queryUrl, "&_page=", p, sep = "")
res <- GET(queryUrl)
if (res$status_code==414) {
stop ("Error code 414: Please request fewer variables")
} else
{res<-res}
}
#Helper function to convert json response to data.frame
toDataFrame <- function(jsonData, parsed = TRUE){
if (exists("errors",where=jsonData)==TRUE) {
errorList<-(matrix(unlist(result$errors), nrow=length(unlist(result$errors[1]))))
stop (paste("\n Your API request has resulted in the following error:",errorList[3,],sep="\n"))
}
if(!parsed)
{
jsonData <- content(jsonData, as = "parsed")
}
for(i in 1:(length(jsonData$results)))
{
jsonData$results[[i]][sapply(jsonData$results[[i]], is.null)] <- NA
jsonData$results[[i]]<-jsonData$results[[i]][order(names(jsonData$results[[i]]))]
}
DF  <-  as.data.frame(t(matrix(unlist(jsonData$results), nrow=length(unlist(jsonData$results[1])))))
colnames(DF)<-names(jsonData$results[[1]])
DF
}
#To get a single page
result <- getPages(0)
result <- content(result, as = "parsed")
DF <- toDataFrame(result)
#To get all pages
if(page == "All")
{
recordsLeft <- result$metadata$total - 20
pages <- seq(ceiling(recordsLeft /20))
result <- lapply(pages, getPages)
temp <- lapply(result, toDataFrame, parsed = FALSE)
DF <- do.call(rbind, temp)
}
DF
}
out3<-GetAllDataInCategory("academics",2013)
out3<-GetAllDataInCategory("school",2013)
out3<-GetAllDataInCategory("student",2013)
GetData <- function(endpoint = "schools", format = "json", fieldParams, optionParams="", apiVersionString = "v1", page = 0){
apiKey <- "zbOOYpijllMQmBuyDlsw1NrlClSuVmKq0XeBIb8s"
urlPath = "https://api.data.gov/ed/collegescorecard"
queryUrl <- paste(urlPath, apiVersionString, paste(paste(paste(endpoint, format, sep = "."), fieldParams, sep = "?"),
optionParams, sep = "&"), sep = "/")
#Add apiKey
queryUrl <- paste(queryUrl, "&api_key=", apiKey, sep = "")
#Helper function to get pages
getPages <- function(p = page){
queryUrl <- paste(queryUrl, "&_page=", p, sep = "")
res <- GET(queryUrl)
if (res$status_code==414) {
stop ("Error code 414: Please request fewer variables")
} else
{res<-res}
}
#Helper function to convert json response to data.frame
toDataFrame <- function(jsonData, parsed = TRUE){
if (exists("errors",where=jsonData)==TRUE) {
errorList<-(matrix(unlist(result$errors), nrow=length(unlist(result$errors[1]))))
stop (paste("\n Your API request has resulted in the following error:",errorList[3,],sep="\n"))
}
if(!parsed)
{
jsonData <- content(jsonData, as = "parsed")
}
for(i in 1:(length(jsonData$results)))
{
jsonData$results[[i]][sapply(jsonData$results[[i]], is.null)] <- NA
jsonData$results[[i]]<-jsonData$results[[i]][order(names(jsonData$results[[i]]))]
}
DF  <-  as.data.frame(t(matrix(unlist(jsonData$results), nrow=length(unlist(jsonData$results[1])))))
colnames(DF)<-names(jsonData$results[[1]])
DF
}
#To get a single page
result <- getPages(0)
result <- content(result, as = "parsed")
DF <- toDataFrame(result)
#To get all pages
if(page == "All")
{
recordsLeft <- result$metadata$total - 20
pages <- seq(ceiling(recordsLeft /20))
result <- lapply(pages, getPages)
temp <- lapply(result, toDataFrame, parsed = FALSE)
DF <- do.call(rbind, temp)
}
DF
}
GetAllDataInCategory <- function(categoryName, year){
#Make the path to the data dicitonary be global var or environment var.
if (!(categoryName %in% c("academics","admissions","aid","completion","cost","earnings","repayment","root",
"school","student"))) {
stop ("Incorrect categoryName. Please choose from the following: 'academics','admissions','aid','completion,'cost',earnings','repayment','root','school', or 'student'. Consult data dictionary for further detail.")
}
if (year<1996 | year>2013) {
stop("Incorrect year selection. Data is available for 1996 through 2013.")
}
dataDict <- read.csv("https://raw.githubusercontent.com/katerabinowitz/College-Scorecard-R-Pkg/master/data/CollegeScorecardDataDictionary-09-08-2015.csv",
stringsAsFactors=FALSE)
categoryVars <- subset(dataDict, dev.category==categoryName, developer.friendly.name)
categoryVars <- categoryVars[categoryVars != ""]
if (categoryName=="root") {
queryList <- paste("fields=", paste(lapply(categoryVars,
function(x) paste(x, sep = "")), collapse = ","), sep = "")
}
else if (categoryName=="school") {
queryList <- paste("fields=id,", paste(lapply(categoryVars,
function(x) paste(categoryName, ".", x, sep = "")), collapse = ","), sep = "")
}
else {
queryList <- paste("fields=id,school.name,", paste(lapply(categoryVars,
function(x) paste(year, ".", categoryName, ".", x, sep = "")), collapse = ","), sep = "")
}
test <- GetData(fieldParams = queryList)
test
}
### To add list:
# 1. how to handle parameter lists from GetAllDataInCategory that are too long
out3<-GetAllDataInCategory("school",2013)
out3<-GetAllDataInCategory("student",2013)
out3<-GetAllDataInCategory("admissions",2013)
out3<-GetAllDataInCategory("academics",2013)
out3<-GetAllDataInCategory("cost",2013)
out3<-GetAllDataInCategory("aid",2013)
out3<-GetAllDataInCategory("repayment",2013)
out3<-GetAllDataInCategory("completion",2013)
out3<-GetAllDataInCategory("earnings",2013)
categoryVars <- subset(dataDict, dev.category=="academics", developer.friendly.name)
dataDict <- read.csv("https://raw.githubusercontent.com/katerabinowitz/College-Scorecard-R-Pkg/master/data/CollegeScorecardDataDictionary-09-08-2015.csv",
stringsAsFactors=FALSE)
categoryVars <- subset(dataDict, dev.category=="academics", developer.friendly.name)
categoryVars <- categoryVars[categoryVars != ""]
queryList <- paste("fields=id,school.name,", paste(lapply(categoryVars,
function(x) paste("2013.academics.", x, sep = "")), collapse = ","), sep = "")
length(categoryVars)
categoryVars[1:100]
categoryVars <- subset(dataDict, dev.category=="completion", developer.friendly.name)
categoryVars <- categoryVars[categoryVars != ""]
queryList <- paste("fields=id,school.name,", paste(lapply(categoryVars,
function(x) paste("2013.completion.", x, sep = "")), collapse = ","), sep = "")
View(dataDict)
categoryVars
queryList<-"fields=root.location.lat,root.location.lon"
myUrl = paste("https://api.data.gov/ed/collegescorecard/v1/schools.json?school.state=",schoolInsert,
"&_",queryList,"&api_key=",apiKey,sep="")
apiKey="zbOOYpijllMQmBuyDlsw1NrlClSuVmKq0XeBIb8s"
schoolInsert="DC"
queryList<-"fields=root.location.lat,root.location.lon"
myUrl = paste("https://api.data.gov/ed/collegescorecard/v1/schools.json?school.state=",schoolInsert,
"&_",queryList,"&api_key=",apiKey,sep="")
res <- GET(myUrl)
res
jsonData <- content(res, as = "parsed")
queryList<-"fields=location"
myUrl = paste("https://api.data.gov/ed/collegescorecard/v1/schools.json?school.state=",schoolInsert,
"&_",queryList,"&api_key=",apiKey,sep="")
res <- GET(myUrl)
res
jsonData <- content(res, as = "parsed")
View(dataDict)
root<-subset(dataDict,dataDict$dev.category=="root")
View(root)
queryList<-"fields=location.lat"
myUrl = paste("https://api.data.gov/ed/collegescorecard/v1/schools.json?school.state=",schoolInsert,
"&_",queryList,"&api_key=",apiKey,sep="")
res <- GET(myUrl)
res
jsonData <- content(res, as = "parsed")
queryList<-"fields=LONGITUDE"
myUrl = paste("https://api.data.gov/ed/collegescorecard/v1/schools.json?school.state=",schoolInsert,
"&_",queryList,"&api_key=",apiKey,sep="")
res <- GET(myUrl)
jsonData <- content(res, as = "parsed")
queryList<-"fields=location.lat"
myUrl = paste("https://api.data.gov/ed/collegescorecard/v1/schools.json?school.state=",schoolInsert,
"&_",queryList,"&api_key=",apiKey,sep="")
res <- GET(myUrl)
jsonData <- content(res, as = "parsed")
queryList<-"fields=root.location.lat"
myUrl = paste("https://api.data.gov/ed/collegescorecard/v1/schools.json?school.state=",schoolInsert,
"&_",queryList,"&api_key=",apiKey,sep="")
res <- GET(myUrl)
queryList<-"fields=2013.root.location.lat"
myUrl = paste("https://api.data.gov/ed/collegescorecard/v1/schools.json?school.state=",schoolInsert,
"&_",queryList,"&api_key=",apiKey,sep="")
res <- GET(myUrl)
jsonData <- content(res, as = "parsed")
queryList<-"fields=2013.location.lat"
myUrl = paste("https://api.data.gov/ed/collegescorecard/v1/schools.json?school.state=",schoolInsert,
"&_",queryList,"&api_key=",apiKey,sep="")
res <- GET(myUrl)
jsonData <- content(res, as = "parsed")
queryList<-"fields=school.location.lat"
myUrl = paste("https://api.data.gov/ed/collegescorecard/v1/schools.json?school.state=",schoolInsert,
"&_",queryList,"&api_key=",apiKey,sep="")
res <- GET(myUrl)
jsonData <- content(res, as = "parsed")
queryList<-"fields=location.lat"
myUrl = paste("https://api.data.gov/ed/collegescorecard/v1/schools.json?school.state=",schoolInsert,
"&_",queryList,"&api_key=",apiKey,sep="")
res <- GET(myUrl)
jsonData <- content(res, as = "parsed")
GetData <- function(apiKey,endpoint = "schools", format = "json", fieldParams, optionParams="", apiVersionString = "v1", page = 0){
urlPath = "https://api.data.gov/ed/collegescorecard"
queryUrl <- paste(urlPath, apiVersionString, paste(paste(paste(endpoint, format, sep = "."), fieldParams, sep = "?"),
optionParams, sep = "&"), sep = "/")
#Add apiKey
queryUrl <- paste(queryUrl, "&api_key=", apiKey, sep = "")
#Helper function to get pages
getPages <- function(p = page){
queryUrl <- paste(queryUrl, "&_page=", p, sep = "")
res <- GET(queryUrl)
if (res$status_code==414) {
stop ("Error code 414: Please request fewer variables")
} else
{res<-res}
}
#Helper function to convert json response to data.frame
toDataFrame <- function(jsonData, parsed = TRUE){
if (exists("errors",where=jsonData)==TRUE) {
errorList<-(matrix(unlist(result$errors), nrow=length(unlist(result$errors[1]))))
stop (paste("\n Your API request has resulted in the following error:",errorList[3,],sep="\n"))
}
if(!parsed)
{
jsonData <- content(jsonData, as = "parsed")
}
for(i in 1:(length(jsonData$results)))
{
jsonData$results[[i]][sapply(jsonData$results[[i]], is.null)] <- NA
jsonData$results[[i]]<-jsonData$results[[i]][order(names(jsonData$results[[i]]))]
}
DF  <-  as.data.frame(t(matrix(unlist(jsonData$results), nrow=length(unlist(jsonData$results[1])))))
colnames(DF)<-names(jsonData$results[[1]])
DF
}
#To get a single page
result <- getPages(0)
result <- content(result, as = "parsed")
DF <- toDataFrame(result)
#To get all pages
if(page == "All")
{
recordsLeft <- result$metadata$total - 20
pages <- seq(ceiling(recordsLeft /20))
result <- lapply(pages, getPages)
temp <- lapply(result, toDataFrame, parsed = FALSE)
DF <- do.call(rbind, temp)
}
DF
}
GetAllDataInCategory <- function(apiKey,categoryName, year){
#Make the path to the data dicitonary be global var or environment var.
if (!(categoryName %in% c("academics","admissions","aid","completion","cost","earnings","repayment","root",
"school","student"))) {
stop ("Incorrect categoryName. Please choose from the following: 'academics','admissions','aid','completion,'cost',earnings','repayment','root','school', or 'student'. Consult data dictionary for further detail.")
}
if (year<1996 | year>2013) {
stop("Incorrect year selection. Data is available for 1996 through 2013.")
}
dataDict <- read.csv("https://raw.githubusercontent.com/katerabinowitz/College-Scorecard-R-Pkg/master/data/CollegeScorecardDataDictionary-09-08-2015.csv",
stringsAsFactors=FALSE)
categoryVars <- subset(dataDict, dev.category==categoryName, developer.friendly.name)
categoryVars <- categoryVars[categoryVars != ""]
if (categoryName=="root") {
queryList <- paste("fields=", paste(lapply(categoryVars,
function(x) paste(x, sep = "")), collapse = ","), sep = "")
}
else if (categoryName=="school") {
queryList <- paste("fields=id,", paste(lapply(categoryVars,
function(x) paste(categoryName, ".", x, sep = "")), collapse = ","), sep = "")
}
else {
queryList <- paste("fields=id,school.name,", paste(lapply(categoryVars,
function(x) paste(year, ".", categoryName, ".", x, sep = "")), collapse = ","), sep = "")
}
DFcat <- GetData(apiKey=apiKey,fieldParams = queryList)
DFcat
}
out3<-GetAllDataInCategory("zbOOYpijllMQmBuyDlsw1NrlClSuVmKq0XeBIb8s","earnings",2013)
out3<-GetAllDataInCategory("zbOOYpijllMQmBuyDlsw1NrlClSuVmKq0XeBIb8s","school",2013)
out3<-GetAllDataInCategory("zbOOYpijllMQmBuyDlsw1NrlClSuVmKq0XeBIb8s","student",2013)
out3<-GetAllDataInCategory("zbOOYpijllMQmBuyDlsw1NrlClSuVmKq0XeBIb8s","academics",2013)
out3<-GetAllDataInCategory("zbOOYpijllMQmBuyDlsw1NrlClSuVmKq0XeBIb8s","earnings",2013)
install.packages("glmnet")
The setAPIKey function allows users to permanently save their API key so they do not have to recall for future data retrieval and can share code that does not include the key.
The collScore package includes a number of functions meant to ease data download.
# Data Retrieval
---
title: "collScore Summary"
author: "Kate Rabinowitz and Iliana Voynichka"
date: "March 15, 2016"
output: pdf_document
---
The collScore package facilitates the download, analysis, and visualization of the U.S. Department of Education Scorecard data. Additional background on the College Scorecard data can be found here: https://collegescorecard.ed.gov/data/. The data is extensive with other 1,500 variables detailing more than 7,000 American colleges covering topics like demographics of the student population, federal financial aid, college costs, education offerings, graduation rates, college-related debt, post-graduation acitivites and salary, and more. The below functions intend to promote and simplify use of the College Scorecard data.
# Data Retrieval
The collScore package includes a number of functions meant to ease data download.
## setAPIKey
The setAPIKey function allows users to permanently save their API key so they do not have to recall for future data retrieval and can share code that does not include the key.
## getData
The getData function simplifies data retrieval from the College Scorecard API, the primary data collection point. Users may specify the specific fields and/or filters they are interested in collecting and the getData function will return their request in a data frame.
## getAllDataInCategory
The getAllDataInCategory function further simplifies the data retrieval process. With over 1,500 variables it may be onerous for users to find and/or list the fields of interest to them. This function allows users to select from 10 overall categories of data such as student, aid, or cost, to return all fields in that category. Additionally, users may further subset the data returned by selecting a text pattern to look at a more specific topics in a larger category.
install("collScore")
library(devtools)
setwd("/Users/katerabinowitz/Documents/StanfordGrad/STATS290/Package/College-Scorecard-R-Pkg")
install("collScore")
devtools::check("collScore", cran=TRUE)
data(dataDict)
categoryVars <- subset(dataDict, dataDict$dev.category=="student", dataDict$developer.friendly.name)
categoryVars <- subset(dataDict, dataDict$dev.category=="student")
categoryVars <- categoryVars[categoryVars != ""]
categoryVars <- subset(dataDict, dataDict$dev.category=="student")[dataDict$developer.friendly.name]
View(dataDict)
categoryVars <- subset(dataDict, dataDict$dev.category=="student")[c(dataDict$developer.friendly.name)]
categoryVars <- subset(dataDict, dataDict$dev.category=="student")[c("dataDict$developer.friendly.name")]
categoryVars <- subset(dataDict, dataDict$dev.category=="student")[c("developer.friendly.name")]
categoryVars <- categoryVars[categoryVars != ""]
data(dataDict)
categoryVars <- subset(dataDict, dataDict$dev.category=="student")[c("developer.friendly.name")]
categoryVars <- categoryVars[categoryVars != ""]
install("collScore")
devtools::check("collScore", cran=TRUE)
install("collScore")
devtools::check("collScore", cran=TRUE)
install("collScore")
devtools::check("collScore", cran=TRUE)
install("collScore")
devtools::check("collScore", cran=TRUE)
install("collScore")
devtools::check("collScore", cran=TRUE)
install("collScore")
devtools::check("collScore", cran=TRUE)
library(collScore)
install("collScore")
devtools::check("collScore", cran=TRUE)
test_that("getAllDataInCategory validates the year argument correctly", {
expect_error(getAllDataInCategory(categoryName = "earnings", year = 2014, pattern = "", addParams = "id,school.name"), "Incorrect year selection")
context("getAllDataInCategory Validation")
test_that("getAllDataInCategory validates the year argument correctly", {
expect_error(getAllDataInCategory(categoryName = "earnings", year = 2014, pattern = "", addParams = "id,school.name"), "Incorrect year selection")
expect_error(getAllDataInCategory(categoryName = "earnings", year = 1995, pattern = "", addParams = "id,school.name"), "Incorrect year selection")
})
test_that("getAllDataInCategory validates the categoryName argument correctly", {
expect_error(getAllDataInCategory(categoryName = "earning", year = 2013, pattern = "", addParams = "id,school.name"), "Incorrect categoryName")
expect_error(getAllDataInCategory(categoryName = "random category", year = 1996, pattern = "", addParams = "id,school.name"), "Incorrect categoryName")
})
)))
context("getAllDataInCategory Validation")
library(testthat)
install.packages("testthat")
library(testthat)
test_that("getAllDataInCategory validates the year argument correctly", {
expect_error(getAllDataInCategory(categoryName = "earnings", year = 2014, pattern = "", addParams = "id,school.name"), "Incorrect year selection")
expect_error(getAllDataInCategory(categoryName = "earnings", year = 1995, pattern = "", addParams = "id,school.name"), "Incorrect year selection")
})
devtools::check("collScore", cran=TRUE)
devtools::use_vignette("summary")
library(devtools)
devtools::use_vignette("summary")
setwd("./collScore")
devtools::use_vignette("summary")
install.packages("knitr")
install.packages("markdown")
library(knitr)
library(markdown)
